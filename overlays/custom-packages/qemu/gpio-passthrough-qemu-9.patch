diff --git a/configs/devices/aarch64-softmmu/default.mak b/configs/devices/aarch64-softmmu/default.mak
index f82a04c27d..35dd533d37 100644
--- a/configs/devices/aarch64-softmmu/default.mak
+++ b/configs/devices/aarch64-softmmu/default.mak
@@ -8,3 +8,6 @@ include ../arm-softmmu/default.mak
 # CONFIG_XLNX_ZYNQMP_ARM=n
 # CONFIG_XLNX_VERSAL=n
 # CONFIG_SBSA_REF=n
+
+CONFIG_NVIDIA_BPMP_GUEST=y
+CONFIG_NVIDIA_GPIO_GUEST=y
diff --git a/hw/arm/virt.c b/hw/arm/virt.c
index a9a913aead..4d79d3d5ec 100644
--- a/hw/arm/virt.c
+++ b/hw/arm/virt.c
@@ -83,6 +83,8 @@
 #include "hw/virtio/virtio-md-pci.h"
 #include "hw/virtio/virtio-iommu.h"
 #include "hw/char/pl011.h"
+#include "hw/misc/nvidia_bpmp_guest.h"
+#include "hw/misc/nvidia_gpio_guest.h"
 #include "qemu/guest-random.h"
 
 static GlobalProperty arm_virt_compat[] = {
@@ -176,6 +178,8 @@ static const MemMapEntry base_memmap[] = {
     [VIRT_NVDIMM_ACPI] =        { 0x09090000, NVDIMM_ACPI_IO_LEN},
     [VIRT_PVTIME] =             { 0x090a0000, 0x00010000 },
     [VIRT_SECURE_GPIO] =        { 0x090b0000, 0x00001000 },
+    [VIRT_NVIDIA_BPMP_GUEST] =	{ 0x090c0000, 0x00001000 },
+    [VIRT_NVIDIA_GPIO_GUEST] =	{ 0x090c1000, 0x00001000 },
     [VIRT_MMIO] =               { 0x0a000000, 0x00000200 },
     /* ...repeating for a total of NUM_VIRTIO_TRANSPORTS, each of that size */
     [VIRT_PLATFORM_BUS] =       { 0x0c000000, 0x02000000 },
@@ -1072,6 +1076,12 @@ static void create_virtio_devices(const VirtMachineState *vms)
     hwaddr size = vms->memmap[VIRT_MMIO].size;
     MachineState *ms = MACHINE(vms);
 
+    /* Create NVIDIA BPMP guest passthru device, possibly need update ftd - WIP */
+    nvidia_bpmp_guest_create(vms->memmap[VIRT_NVIDIA_BPMP_GUEST].base);
+
+    /* Create NVIDIA GPIO guest passthru device, possibly need update ftd - WIP */
+    nvidia_gpio_guest_create(vms->memmap[VIRT_NVIDIA_GPIO_GUEST].base);
+
     /* We create the transports in forwards order. Since qbus_realize()
      * prepends (not appends) new child buses, the incrementing loop below will
      * create a list of virtio-mmio buses with decreasing base addresses.
diff --git a/hw/misc/Kconfig b/hw/misc/Kconfig
index 1e08785b83..0f762a0119 100644
--- a/hw/misc/Kconfig
+++ b/hw/misc/Kconfig
@@ -11,6 +11,12 @@ config ARMSSE_MHU
 config ARMSSE_CPU_PWRCTRL
     bool
 
+config NVIDIA_BPMP_GUEST
+    bool
+
+config NVIDIA_GPIO_GUEST
+    bool
+
 config ISA_DEBUG
     bool
     depends on ISA_BUS
diff --git a/hw/misc/meson.build b/hw/misc/meson.build
index 86596a3888..876417cdec 100644
--- a/hw/misc/meson.build
+++ b/hw/misc/meson.build
@@ -1,4 +1,6 @@
 system_ss.add(when: 'CONFIG_APPLESMC', if_true: files('applesmc.c'))
+system_ss.add(when: 'CONFIG_NVIDIA_BPMP_GUEST', if_true: files('nvidia_bpmp_guest.c'))
+system_ss.add(when: 'CONFIG_NVIDIA_GPIO_GUEST', if_true: files('nvidia_gpio_guest.c'))
 system_ss.add(when: 'CONFIG_EDU', if_true: files('edu.c'))
 system_ss.add(when: 'CONFIG_FW_CFG_DMA', if_true: files('vmcoreinfo.c'))
 system_ss.add(when: 'CONFIG_ISA_DEBUG', if_true: files('debugexit.c'))
diff --git a/hw/misc/nvidia_bpmp_guest.c b/hw/misc/nvidia_bpmp_guest.c
new file mode 100644
index 0000000000..3facee6d00
--- /dev/null
+++ b/hw/misc/nvidia_bpmp_guest.c
@@ -0,0 +1,171 @@
+#include "qemu/osdep.h"
+#include "qemu/log.h"
+#include "qapi/error.h" /* provides error_fatal() handler */
+#include "hw/sysbus.h"	/* provides all sysbus registering func */
+#include "hw/misc/nvidia_bpmp_guest.h"
+
+#define TYPE_NVIDIA_BPMP_GUEST "nvidia_bpmp_guest"
+typedef struct NvidiaBpmpGuestState NvidiaBpmpGuestState;
+DECLARE_INSTANCE_CHECKER(NvidiaBpmpGuestState, NVIDIA_BPMP_GUEST, TYPE_NVIDIA_BPMP_GUEST)
+
+#define TX_BUF   0x0000
+#define RX_BUF   0x0200
+#define TX_SIZ   0x0400
+#define RX_SIZ   0x0408
+#define RET_COD  0x0410
+#define MRQ      0x0500
+
+#define MEM_SIZE 0x600
+#define HOST_DEVICE_PATH "/dev/bpmp-host"
+#define MESSAGE_SIZE 0x0200
+
+// qemu_log_mask(LOG_UNIMP, "%s: \n", __func__ );
+
+struct NvidiaBpmpGuestState
+{
+	SysBusDevice parent_obj;
+	MemoryRegion iomem;
+	int host_device_fd;
+	uint8_t mem[MEM_SIZE];
+};
+
+// Device memory map:
+
+// 0x090c0000 +  /* Base address, size 0x01000 */
+
+//      0x0000 \ Tx buffer
+//      0x01FF /
+//      0x0200 \ Rx buffer
+//      0x03FF /
+//      0x0400  -- Tx size
+//      0x0408  -- Rx size
+//      0x0410  -- Ret
+//      0x0500  -- mrq
+
+
+
+//  Data should be aligned to 64bit paragraph.
+
+//  Protocol is:
+//  1. Write data buffers to 0x0000-0x01FF and 0x0200-0x03FF
+//  2. Write buffer sizes to 0x0400 (Tx) and 0x0408 (Rx)
+//  2. Start operation by writing mrq opcode to address 0x0500
+//  3. Read ret code from 0x0410 and response data from the buffers
+
+static uint64_t nvidia_bpmp_guest_read(void *opaque, hwaddr addr, unsigned int size)
+{
+	NvidiaBpmpGuestState *s = opaque;
+
+	if (addr >= MEM_SIZE)
+		return 0xDEADBEEF;
+
+	// Cast buffer location as uint64_t
+	return *(uint64_t*)&s->mem[addr];
+}
+
+static void nvidia_bpmp_guest_write(void *opaque, hwaddr addr, uint64_t data, unsigned int size)
+{
+	NvidiaBpmpGuestState *s = opaque;
+	int ret;
+
+	struct
+	{
+		unsigned int mrq;
+		struct
+		{
+			void *data;
+			size_t size;
+		} tx;
+		struct
+		{
+			void *data;
+			size_t size;
+			int ret;
+		} rx;
+	} messg;
+
+	memset(&messg, 0, sizeof(messg));
+
+	if (addr >= MEM_SIZE){
+		qemu_log_mask(LOG_UNIMP, "qemu: Error addr >= MEM_SIZE in 0x%lX data: 0x%lX\n", addr, data);
+		return;
+	}
+
+	switch (addr)
+	{
+	case MRQ:
+		// set up the structure
+		messg.mrq = data;
+		messg.tx.data = &s->mem[TX_BUF];
+		memcpy(&messg.tx.size, &s->mem[TX_SIZ], sizeof(messg.tx.size));
+		messg.rx.data = &s->mem[RX_BUF];
+		memcpy(&messg.rx.size, &s->mem[RX_SIZ], sizeof(messg.rx.size));
+
+		ret = write(s->host_device_fd, &messg, sizeof(messg)); // Send the data to the host module
+		if (ret < 0)
+		{
+			qemu_log_mask(LOG_UNIMP, "%s: Failed to write the host device..\n", __func__);
+			return;
+		}
+
+		memcpy(&s->mem[RET_COD], &messg.rx.ret, sizeof(messg.rx.ret));
+		memcpy(&s->mem[RX_SIZ], &messg.rx.size, sizeof(messg.rx.size));
+
+		break;
+
+	default:
+
+		memcpy(&s->mem[addr], &data, size);
+	}
+
+	return;
+}
+
+static const MemoryRegionOps nvidia_bpmp_guest_ops = {
+	.read = nvidia_bpmp_guest_read,
+	.write = nvidia_bpmp_guest_write,
+	.endianness = DEVICE_NATIVE_ENDIAN,
+};
+
+static void nvidia_bpmp_guest_instance_init(Object *obj)
+{
+	NvidiaBpmpGuestState *s = NVIDIA_BPMP_GUEST(obj);
+
+	/* allocate memory map region */
+	memory_region_init_io(&s->iomem, obj, &nvidia_bpmp_guest_ops, s, TYPE_NVIDIA_BPMP_GUEST, MEM_SIZE);
+	sysbus_init_mmio(SYS_BUS_DEVICE(obj), &s->iomem);
+
+	s->host_device_fd = open(HOST_DEVICE_PATH, O_RDWR); // Open the device with read/write access
+
+	if (s->host_device_fd < 0)
+	{
+		qemu_log_mask(LOG_UNIMP, "%s: Failed to open the host device..\n", __func__);
+		return;
+	}
+}
+
+/* create a new type to define the info related to our device */
+static const TypeInfo nvidia_bpmp_guest_info = {
+	.name = TYPE_NVIDIA_BPMP_GUEST,
+	.parent = TYPE_SYS_BUS_DEVICE,
+	.instance_size = sizeof(NvidiaBpmpGuestState),
+	.instance_init = nvidia_bpmp_guest_instance_init,
+};
+
+static void nvidia_bpmp_guest_register_types(void)
+{
+	type_register_static(&nvidia_bpmp_guest_info);
+}
+
+type_init(nvidia_bpmp_guest_register_types)
+
+	/*
+	 * Create the Nvidia BPMP guest device.
+	 */
+	DeviceState *nvidia_bpmp_guest_create(hwaddr addr)
+{
+	DeviceState *dev = qdev_new(TYPE_NVIDIA_BPMP_GUEST);
+	sysbus_realize_and_unref(SYS_BUS_DEVICE(dev), &error_fatal);
+	sysbus_mmio_map(SYS_BUS_DEVICE(dev), 0, addr);
+	return dev;
+}
diff --git a/hw/misc/nvidia_bpmp_guest.h b/hw/misc/nvidia_bpmp_guest.h
new file mode 100644
index 0000000000..dd4b4221d3
--- /dev/null
+++ b/hw/misc/nvidia_bpmp_guest.h
@@ -0,0 +1,9 @@
+#ifndef HW_NVIDIA_BPMP_GUEST_H
+#define HW_NVIDIA_BPMP_GUEST_H
+
+#include "qom/object.h"
+
+DeviceState *nvidia_bpmp_guest_create(hwaddr);
+
+
+#endif
diff --git a/hw/misc/nvidia_gpio_guest.c b/hw/misc/nvidia_gpio_guest.c
new file mode 100644
index 0000000000..a49ca504cb
--- /dev/null
+++ b/hw/misc/nvidia_gpio_guest.c
@@ -0,0 +1,516 @@
+#include "qemu/osdep.h"
+#include "qemu/qemu-print.h"
+#include "qemu/log.h"
+#include "qapi/error.h" /* provides error_fatal() handler */
+#include "hw/sysbus.h"	/* provides all sysbus registering func */
+#include "hw/misc/nvidia_gpio_guest.h"
+#include "monitor/qdev.h"
+#include "hw/irq.h"
+#include "qom/object.h"
+#include "hw/qdev-core.h"
+#include "linux/vfio.h"
+#include "hw/vfio/vfio-common.h"
+#include "hw/sysbus.h"
+#include "exec/address-spaces.h"
+
+#define TYPE_NVIDIA_IRQ "nvidia_irq_guest_class"
+typedef DeviceClass NvidiaIrqClass;
+typedef struct NvidiaIrqDevice NvidiaIrqDevice;
+
+#define NVIDIA_IRQ_GET_CLASS(obj) \
+   OBJECT_GET_CLASS(NvidiaIrqClass, obj, TYPE_NVIDIA_IRQ)
+#define NVIDIA_IRQ_CLASS(klass) \
+   OBJECT_CLASS_CHECK(NvidiaIrqClass, klass, TYPE_NVIDIA_IRQ)
+#define NVIDIA_IRQ_DEVICE(obj) \
+   OBJECT_CHECK(NvidiaIrqDevice, obj, TYPE_NVIDIA_IRQ)
+
+/* help at: 
+ * https://www.qemu.org/docs/master/devel/qom.html#creating-a-qom-class
+ */
+ 
+ /*
+  * gpiochip0 - 164 lines
+  * gpiochip1 - 32 lines 
+  */
+
+#define GPIOCHIP0_NAME "gpiochip0"
+// reg = <0x00 0x2200000 0x00 0x10000 0x00 0x2210000 0x00 0x10000>;
+#define GPIOCHIP0_REG_BASE 0x2200000  // [tegra234-gpio] (164 lines)
+#define GPIOCHIP0_REG_SIZE  0x20000    // 0x10000+0x10000
+#define GPIOCHIP0_NUM_LINES 164
+#define GPIOCHIP0_OFFSET 0x120
+#define GPIOCHIP0_ACTIVE_LEVEL 1
+
+#define GPIOCHIP1_NAME "gpiochip1"
+// reg = <0x00 0xc2f0000 0x00 0x1000 0x00 0xc2f1000 0x00 0x1000>;
+#define GPIOCHIP1_REG_BASE 0xc2F0000   // [tegra234-gpio-aon] (32 lines)
+#define GPIOCHIP1_REG_SIZE  0x2000     // 0x1000+0x1000
+#define GPIOCHIP1_NUM_LINES 32
+#define GPIOCHIP1_OFFSET 0x38
+#define GPIOCHIP1_ACTIVE_LEVEL 0
+// #define GPIOCHIP1_OFFSET 0x6A
+
+#define QEMU_DEBUG_MSG
+
+struct NvidiaIrqDevice
+{
+	SysBusDevice parent_obj;
+    qemu_irq *irq;
+    const char *device_name;
+    int memindex;
+    void *host_memory;
+    int regbase_address;
+    int regbase_size;
+    int offset;
+    int num_lines;
+    int irq_active_level;
+    MemoryRegion mmio;
+};
+
+// Define a function to handle interrupts
+static void nvidia_irq_handler(void *opaque, int n, int level)
+{
+    // Handle the interrupt
+    // 0x120 to 0x1C4 is gpiochip0 
+    // 0x38  to 0x58  is gpiochip1
+    NvidiaIrqDevice *dev = opaque;
+    int index = n - dev->offset;
+    #ifdef QEMU_DEBUG_MSG
+	qemu_printf("IRQ: %s, dev=%p, index=%d\n", __func__, dev, index);
+    #endif
+    if(index < 0 || index >= dev->num_lines) {
+        qemu_printf("IRQ: **Error** Illegal IRQ index (%d)\n", n);
+        return;
+    }
+    qemu_irq_pulse(dev->irq[index]);
+}
+
+static void nvidia_gpio_irq_reset(DeviceState *dev) {
+    #ifdef QEMU_DEBUG_MSG
+	qemu_printf("IRQ: %s, dev=%p\n", __func__, dev);
+    #endif
+    // Implementation of device reset
+}
+
+static int nvidia_gpio_memory_access(void *opaque, hwaddr addr, unsigned int size, bool is_write) {
+    NvidiaIrqDevice *dev = opaque;
+
+    #ifdef QEMU_DEBUG_MSG
+    qemu_printf("IRQ: %s, dev=%p, addr=0x%lx, size=%d, is_write=%d\n", __func__, dev, addr, size, is_write);
+    #endif
+
+    // Forward the memory access to the host's memory
+    if (is_write) {
+        // Write to the host's memory
+        *(uint64_t *)(dev->host_memory + addr) = size;
+    } else {
+        // Read from the host's memory
+        uint64_t value = *(uint64_t *)(dev->host_memory + addr);
+        #ifdef QEMU_DEBUG_MSG
+        qemu_printf("Read value: 0x%lx\n", value);
+        #endif
+    }
+
+    return 0;
+}
+static uint64_t nvidia_gpio_memory_read(void *opaque, hwaddr addr, unsigned int size) {
+    NvidiaIrqDevice *dev = opaque;
+    #ifdef QEMU_DEBUG_MSG
+    qemu_printf("IRQ: %s, dev=%p, addr=0x%lx, size=%d\n", __func__, dev, addr, size);
+    #endif
+
+    // Read from the host's memory
+    uint64_t value = *(uint64_t *)(dev->host_memory + addr);
+    #ifdef QEMU_DEBUG_MSG
+    qemu_printf("Read value: 0x%lx\n", value);
+    #endif
+    return value;
+}
+
+static void nvidia_gpio_memory_write(void *opaque, hwaddr addr, uint64_t data, unsigned int size) {
+    NvidiaIrqDevice *dev = opaque;
+    #ifdef QEMU_DEBUG_MSG
+    qemu_printf("IRQ: %s, addr=0x%lx, size=%d\n", __func__, addr, size);
+    #endif
+
+    // Write to the host's memory
+    *(uint64_t *)(dev->host_memory + addr) = data;
+}
+
+static const MemoryRegionOps nvidia_gpio_mem_ops = {
+    .read = &nvidia_gpio_memory_read,
+    .write = &nvidia_gpio_memory_write,
+    .endianness = DEVICE_NATIVE_ENDIAN,
+    // .valid.min_access_size = 4,
+    // .valid.max_access_size = 4,
+
+};
+
+static void nvidia_gpio_irq_realize(DeviceState *sdev, Error **errp) {
+    NvidiaIrqDevice *dev = NVIDIA_IRQ_DEVICE(sdev);
+    #ifdef QEMU_DEBUG_MSG
+    qemu_printf("IRQ: %s, device=%s, lines=%d, dev=%p\n", __func__, dev->device_name, dev->num_lines, dev);
+    #endif
+
+    dev->irq = malloc(sizeof(qemu_irq) * dev->num_lines);
+    // check for errors
+    if(! dev->irq) {
+        qemu_printf("IRQ: %s **Error** , Null pointer (malloc fail)\n", __func__);
+        return;
+    }
+
+    for (int i = 0; i < dev->num_lines; i++) {
+        // Allocate IRQ lines based on base and offset addresses
+        // qemu_printf("IRQ: %s, chip=%s, irq=%d\n", __func__, dev->device_name, i + dev->offset);
+        dev->irq[i] = qemu_allocate_irq(nvidia_irq_handler, dev, i + dev->offset);
+        if(! dev->irq[i]) {
+            qemu_printf("IRQ: %s **Error** Null pointer in dev->irq[%d]\n", __func__, i);
+            return;
+        }
+        sysbus_init_irq(SYS_BUS_DEVICE(dev), &dev->irq[i]);    // GPIO does not need System Bus ?
+        // Set up the IRQ routing
+        qemu_set_irq(dev->irq[i], dev->irq_active_level);      // Set the IRQ trigger level
+    }
+    #ifdef QEMU_DEBUG_MSG
+    qemu_printf("IRQ: %s, allocated %d irq lines for %s\n", __func__, dev->num_lines, dev->device_name);
+    #endif
+
+    /* memory passthrough */
+
+    // Create a unique name for the shared memory object
+    char shm_name[64];
+    snprintf(shm_name, sizeof(shm_name), "/%s_shared_memory", dev->device_name);
+
+    // Open the shared memory object
+    int shm_fd = shm_open(shm_name, O_RDWR | O_CREAT, 0600);
+    if (shm_fd == -1) {
+        qemu_printf("IRQ: %s **Error** Failed to create shared memory object\n", __func__);
+        return;
+    }
+
+    // Set the size of the shared memory object
+    if (ftruncate(shm_fd, dev->regbase_size) == -1) {
+        qemu_printf("IRQ: %s **Error** Failed to set shared memory size\n", __func__);
+        close(shm_fd);
+        return;
+    }
+
+    // Map the shared memory into the address space
+    dev->host_memory = mmap(NULL, dev->regbase_size, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
+    if (dev->host_memory == MAP_FAILED) {
+        qemu_printf("IRQ: %s **Error** Failed to map shared memory\n", __func__);
+        close(shm_fd);
+        return;
+    }
+
+    // Close the shared memory file descriptor (mapping remains valid)
+    close(shm_fd);
+
+    // Communicate the shared memory details to the host driver (not shown here)
+
+    // Initialize the MMIO memory region with custom handlers
+    memory_region_init_io(&dev->mmio, OBJECT(dev), &nvidia_gpio_mem_ops, dev, "nvidia-gpio-mmio", dev->regbase_size);
+    // sysbus_init_mmio(SYS_BUS_DEVICE(dev), &dev->mmio);
+    MemoryRegion *sys_mem = get_system_memory();
+    memory_region_add_subregion(sys_mem, dev->regbase_address, &dev->mmio);
+}
+
+// Define the initialisation function to create the virtual IRQ device
+static void nvidia_irq_guest_instance_init(Object *obj) {
+    NvidiaIrqDevice *dev = NVIDIA_IRQ_DEVICE(obj);
+    // struct vfio_device *vfio_dev = vfio_get_device(dev->device_name);
+    #ifdef QEMU_DEBUG_MSG
+	qemu_printf("IRQ: %s, dev=%p\n", __func__, dev);
+    #endif
+
+}
+
+static void nvidia_gpio_irq_free(DeviceState *sdev) {
+    NvidiaIrqDevice *dev = NVIDIA_IRQ_DEVICE(sdev);
+    #ifdef QEMU_DEBUG_MSG
+	qemu_printf("IRQ: %s, dev=%p\n", __func__, dev);
+    #endif
+
+    for (int i = 0; i < dev->num_lines; i++) {
+        qemu_free_irq(dev->irq[i]);
+    }
+    free(dev->irq);
+}
+
+// Define a function to create the IRQ module class 
+static void nvidia_irq_guest_class_init(ObjectClass *klass, void *data) {
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    #ifdef QEMU_DEBUG_MSG
+	qemu_printf("IRQ: %s, klass=%p\n", __func__, klass);
+    #endif
+    dc->bus_type = TYPE_SYSTEM_BUS; // Set the bus type
+    dc->reset = nvidia_gpio_irq_reset;
+    dc->realize = nvidia_gpio_irq_realize;
+    dc->unrealize = nvidia_gpio_irq_free;
+    dc->desc = "NVIDIA GPIO IRQ Device";
+}
+
+// create a new type to define the info related to our device
+static const TypeInfo nvidia_gpio_irq_class_info = {
+	.name = TYPE_NVIDIA_IRQ,
+	// .parent = TYPE_DEVICE,
+	.parent = TYPE_SYS_BUS_DEVICE,
+	.instance_size = sizeof(NvidiaIrqDevice),
+    .instance_init = nvidia_irq_guest_instance_init,
+	.class_init = nvidia_irq_guest_class_init,
+};
+
+// we do not need module_obj() if we build the module statically, type_init() should be enough
+module_obj(TYPE_NVIDIA_IRQ);
+
+static void init_irq_devices(void) {
+    // Create device for gpiochip0 (164 lines)
+    DeviceState *gpiochip0 = qdev_new(TYPE_NVIDIA_IRQ);
+    NvidiaIrqDevice *chip0_dev = NVIDIA_IRQ_DEVICE(gpiochip0);
+    chip0_dev->num_lines = GPIOCHIP0_NUM_LINES;
+    chip0_dev->memindex = 0;
+    chip0_dev->regbase_address = GPIOCHIP0_REG_BASE;
+    chip0_dev->regbase_size = GPIOCHIP0_REG_SIZE;
+    chip0_dev->irq_active_level = GPIOCHIP0_ACTIVE_LEVEL;
+    chip0_dev->offset=GPIOCHIP0_OFFSET;
+    chip0_dev->device_name = GPIOCHIP0_NAME;
+
+    // Create device for gpiochip1 (32 lines)
+    DeviceState *gpiochip1 = qdev_new(TYPE_NVIDIA_IRQ);
+    NvidiaIrqDevice *chip1_dev = NVIDIA_IRQ_DEVICE(gpiochip1);
+    chip1_dev->num_lines = GPIOCHIP1_NUM_LINES;
+    chip1_dev->memindex = 1;
+    chip1_dev->regbase_address = GPIOCHIP1_REG_BASE;
+    chip1_dev->regbase_size = GPIOCHIP1_REG_SIZE;
+    chip1_dev->irq_active_level = GPIOCHIP1_ACTIVE_LEVEL;
+    chip1_dev->offset=GPIOCHIP1_OFFSET;
+    chip1_dev->device_name = GPIOCHIP1_NAME;
+
+    // Create the devices
+    qdev_realize(gpiochip0, sysbus_get_default(), &error_fatal);
+    qdev_realize(gpiochip1, sysbus_get_default(), &error_fatal);
+}
+
+/*-------------------------------------*/
+
+#define TYPE_NVIDIA_GPIO "nvidia_gpio_guest"
+typedef struct NvidiaGpioState NvidiaGpioState;
+// DECLARE_INSTANCE_CHECKER(NvidiaGpioState, NVIDIA_GPIO, TYPE_NVIDIA_GPIO)
+
+#define NVIDIA_GPIO(obj) \
+    OBJECT_CHECK(NvidiaGpioState, obj, TYPE_NVIDIA_GPIO)
+
+
+#define MEM_SIZE 0x18	   // mem size in bytes is 3 64 bit words
+#define RETURN_OFF 0x10	// offset (in bytes) for return value is two 64 bit words
+#define RETURN_SIZE 8
+// #define RETURN_OFF 0
+#define HOST_DEVICE_PATH "/dev/gpio-host"
+
+// #define GPIO_PT_DEBUG
+// #define GPIO_PT_DEBUG_VERBOSE
+
+_Static_assert(sizeof(uint64_t) == RETURN_SIZE, "size assertion for RETURN_SIZE failed");
+_Static_assert(sizeof(uint64_t)*3 == MEM_SIZE, "size assertion for MEM_SIZE failed");
+_Static_assert(sizeof(uint64_t)*2 == RETURN_OFF, "size assertion for RETURN_OFF failed");
+
+
+struct NvidiaGpioState
+{
+    // NvidiaIrqDevice parent; // embed the class struct
+	SysBusDevice parent_obj;
+	MemoryRegion iomem;
+	int host_device_fd;
+	uint8_t mem[MEM_SIZE];
+	unsigned char length;
+	int towrite, written;
+	uint64_t return_value;
+};
+
+pthread_mutex_t io_mutex = PTHREAD_MUTEX_INITIALIZER;
+pthread_mutex_t return_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+// Device memory: 0x090c1000 +  /* Base address */
+
+static uint64_t nvidia_gpio_read(void *opaque, hwaddr addr, unsigned int size)
+{
+	struct NvidiaGpioState *s = opaque;
+	uint64_t mask = ( size >= 8) ? (uint64_t)0xFFFFFFFFFFFFFFFF : ( (uint64_t)0x0000000000000001 << (size << 3) ) - 1;
+	uint64_t retval = ( s->return_value >> (addr<<3) ) & mask;
+
+	s->written -= size;
+
+	if ( s->written < 0 ) {
+		qemu_printf("%s: **Error** Size error in read (%d)\n", __func__, s->written);
+		s->written = 0;	// allow next message
+		retval = 0x01234567ABEDFACE;
+	}
+
+	if( size + addr > RETURN_OFF + RETURN_SIZE || size > RETURN_SIZE ) {
+		qemu_printf("%s: **Error** address or size overflow, addr: 0x%lX, size: %d\n", __func__, addr, size);
+		s->written = 0;	// allow next message
+		retval = 0x01234567ABEDFACE;
+	}
+
+	if ( s->written == 0 ) {
+		pthread_mutex_unlock(&return_mutex);	// allow next message
+	}
+
+	return retval;
+}
+
+static inline ssize_t safe_write(int fd, const void *buf, size_t count) {
+	ssize_t ret;
+	pthread_mutex_lock(&io_mutex);
+	ret = write(fd, buf, count);
+	pthread_mutex_unlock(&io_mutex);
+	return ret;
+}
+
+/*
+ *   void *opaque:	   This is a pointer to opaque data associated with the memory region.
+ *					   It is used to pass additional context or information to the callback function.
+ *					   In this case, it can be used to access device-specific data structures or state
+ *					   information required for handling the write operation.
+ *
+ *   hwaddr addr:		This parameter represents the hardware address or the offset within the memory region
+ *					   where the write operation is taking place. It specifies the location where the data should be written.
+ *
+ *   uint64_t data:	  This parameter holds the data that needs to be written to the memory region.
+ *					   It represents the value that will be stored at the specified address (addr).
+ *
+ *   unsigned int size:  This parameter indicates the size of the data being written, in bytes. It specifies the number of bytes
+ *					   to be written starting from the given address.
+ */
+
+static void nvidia_gpio_write(void *opaque, hwaddr addr, uint64_t data, unsigned int size)
+{
+	NvidiaGpioState *s = opaque;
+	int ret = 0;
+	uint64_t mask;
+
+	if(addr == 0) {
+		s->length = (*(unsigned char *)&data & 0xFE) >> 1;		   // s->length is 7 top MSB bits in first byte
+		*(unsigned char *)&data = *(unsigned char *)&data & 0x01;	// remove lenght data from message
+		memset(s->mem, 0, s->length);
+		s->towrite = 0;
+	}
+
+	if (addr > s->length - size){
+		qemu_printf("%s: **Error** addr (%ld) > s->length (%d)- size (%d)\n", __func__, addr, s->length, size);
+		return;
+	}
+
+	// accumulate message
+	memcpy(s->mem + addr, &data, size);
+	s->towrite += size;
+
+	// writeing last block
+	if(addr == s->length - size) {
+
+		if( s->length > 0x18 || s->mem[0]&0xFE || s->mem[1] >= 0x80 || s->mem[1] < 0x20) { // block obvious errors only
+			s->return_value = 0xDEAFFACE;
+			qemu_printf("%s: **Error** signal \'%c\' was blocked (chip=%d)\n", __func__, s->mem[1], s->mem[0]);
+		}
+		else {
+
+			if( s->towrite != s->length ) {	  // size check before write
+				qemu_printf("%s: **Error** Size error in write %d of %d\n", __func__, s->towrite, s->length);
+				return;
+			}
+
+			pthread_mutex_lock(&return_mutex);
+			if ( (ret = safe_write(s->host_device_fd, s->mem, s->towrite)) < 0 )
+			{
+				// error in write()
+				qemu_printf("%s: **Error** 0x%02X, Failed to write the host device (%d)\n", __func__, errno, s->towrite);
+				s->return_value = 0x1BADFACE;
+				s->written = 0;
+				pthread_mutex_unlock(&return_mutex);	// allow next message
+			}
+			else {
+                #ifdef GPIO_PT_DEBUG
+				qemu_printf("qemu: **Success** writing (%d) signal \'%c\' to the host device\n", ret, s->mem[1]);
+                #endif
+				// in addition to written length, 'ret' contains also the count of returned bytes appended to the end of the buffer
+				// note: the size of the return value is (s->written - RETURN_OFF), should be 4 or 8 bytes
+				s->written = ret;		   // update 'written' to actually written bytes ('ret'|| may be altered by host's return value)
+				s->written -= RETURN_OFF;   // begin to handle return, subtract return offset to get expected return size
+				if ( s->written > 0 && s->written <= RETURN_SIZE ) {
+					// a return value is available
+					// note: shift left does not work when we shift 64 bits (8 bytes) because the '1' is lost at 65 bits
+					mask = ( s->written >= 8) ? (uint64_t)0xFFFFFFFFFFFFFFFF : ( (uint64_t)0x0000000000000001 << (s->written << 3) ) - 1;
+					s->return_value = *(uint64_t *)(s->mem + RETURN_OFF) & mask;
+				}
+				else {
+					// no return value
+					s->written = 0;
+					if ( ret != s->length ) {	   // size check after write at least 'length' must be written (return padding may occur)
+						qemu_printf("%s: **Warning** %d bytes of %d, were written to host\n", __func__, s->written, s->length);
+						s->return_value = 0x2BADFACE;
+					}
+					pthread_mutex_unlock(&return_mutex);	// allow next message
+				}
+			}
+
+		} // close error check
+
+        #ifdef GPIO_PT_DEBUG
+		qemu_printf("qemu: return_value: 0x%016lX\n", s->return_value);
+        #endif
+	}
+	return;
+}
+
+static const MemoryRegionOps nvidia_gpio_ops = {
+	.read = nvidia_gpio_read,
+	.write = nvidia_gpio_write,
+	.endianness = DEVICE_NATIVE_ENDIAN,
+};
+
+static void nvidia_gpio_instance_init(Object *obj)
+{
+	struct NvidiaGpioState *s = NVIDIA_GPIO(obj);
+	memset(s->mem, 0, MEM_SIZE);
+
+	/* allocate memory map region */
+	memory_region_init_io(&s->iomem, obj, &nvidia_gpio_ops, s, TYPE_NVIDIA_GPIO, MEM_SIZE);
+	sysbus_init_mmio(SYS_BUS_DEVICE(obj), &s->iomem);
+
+	s->host_device_fd = open(HOST_DEVICE_PATH, O_RDWR); // Open the device with read/write access
+
+	if (s->host_device_fd < 0)
+	{
+		qemu_printf("%s: **Error** Failed to open the host device\n", __func__);
+		return;
+	}
+
+	init_irq_devices();
+}
+
+/* create a new type to define the info related to our device */
+static const TypeInfo nvidia_gpio_chardev_info = {
+	.name = TYPE_NVIDIA_GPIO,
+	.parent = TYPE_SYS_BUS_DEVICE,
+	.instance_size = sizeof(NvidiaGpioState),
+	.instance_init = nvidia_gpio_instance_init,
+};
+
+static void nvidia_gpio_register_types(void)
+{
+	type_register_static(&nvidia_gpio_chardev_info);
+	type_register_static(&nvidia_gpio_irq_class_info);
+}
+
+type_init(nvidia_gpio_register_types)
+
+	/*
+	 * Create the Nvidia GPIO guest device.
+	 */
+	DeviceState *nvidia_gpio_guest_create(hwaddr addr)
+{
+	DeviceState *dev = qdev_new(TYPE_NVIDIA_GPIO);
+	// sysbus_create_and_unref(SYS_BUS_DEVICE(dev), &error_fatal); // depreceted in 9.0.2?
+	sysbus_mmio_map(SYS_BUS_DEVICE(dev), 0, addr);
+	return dev;
+}
diff --git a/hw/misc/nvidia_gpio_guest.h b/hw/misc/nvidia_gpio_guest.h
new file mode 100644
index 0000000000..9e1a693fb2
--- /dev/null
+++ b/hw/misc/nvidia_gpio_guest.h
@@ -0,0 +1,9 @@
+#ifndef HW_NVIDIA_GPIO_GUEST_H
+#define HW_NVIDIA_GPIO_GUEST_H
+
+#include "qom/object.h"
+
+DeviceState *nvidia_gpio_guest_create(hwaddr);
+
+
+#endif
diff --git a/include/hw/arm/virt.h b/include/hw/arm/virt.h
index bb486d36b1..b5ad45d3a3 100644
--- a/include/hw/arm/virt.h
+++ b/include/hw/arm/virt.h
@@ -67,6 +67,8 @@ enum {
     VIRT_PCIE_MMIO,
     VIRT_PCIE_PIO,
     VIRT_PCIE_ECAM,
+    VIRT_NVIDIA_BPMP_GUEST,
+    VIRT_NVIDIA_GPIO_GUEST,
     VIRT_PLATFORM_BUS,
     VIRT_GPIO,
     VIRT_SECURE_UART,
